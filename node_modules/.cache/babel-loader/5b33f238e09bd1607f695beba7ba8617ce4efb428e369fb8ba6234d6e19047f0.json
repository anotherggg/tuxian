{"ast":null,"code":"// 扩展vue原有的功能：全局组件，自定义指令，挂载原型方法，注意：没有全局过滤器\n// 这就是插件\n// vue2.0插件写法要素：导出一个对象，有install函数，默认传入了Vue构造函数，Vue基础之上扩展\n// vue3.0插件写法要素：导出一个对象，有install函数，默认传入了app应用实例，app基础上扩展\nimport XtxSkeleton from './xtx-skeleton.vue';\nimport XtxCarousel from './xtx-carousel.vue';\nimport XtxMore from './xtx-more.vue';\nimport defaultImg from '@/assets/images/200.png';\nexport default {\n  install(app) {\n    // 在app上进行拓展，app提供component directive 函数\n    // 如果要挂载原型 app.config.globalProperties方式\n    app.component(XtxSkeleton.name, XtxSkeleton);\n    app.component(XtxCarousel.name, XtxCarousel);\n    app.component(XtxMore.name, XtxMore);\n    defineDirective(app);\n  }\n};\n// 指令\nconst defineDirective = app => {\n  // 创建全局指令\n  app.directive('lazyload', {\n    mounted(el, binding) {\n      // el为dom对象\n      // binding为自定义指令的值\n      const observer = new IntersectionObserver(([{\n        isIntersecting\n      }]) => {\n        // 判断元素是否存在\n        if (isIntersecting) {\n          // 停止观察\n          observer.unobserve(el);\n          el.onerror = () => {\n            // 设置监视的dom元素src的值\n            el.src = defaultImg;\n          };\n          el.src = binding.value;\n        }\n      }, {\n        // 设置滚动到多少\n        threshold: 0.01\n      });\n      // 开始观察\n      observer.observe(el);\n    }\n  });\n};","map":{"version":3,"names":["XtxSkeleton","XtxCarousel","XtxMore","defaultImg","install","app","component","name","defineDirective","directive","mounted","el","binding","observer","IntersectionObserver","isIntersecting","unobserve","onerror","src","value","threshold","observe"],"sources":["E:/自己写的项目/tuxian/erabbit-pc-vue-project/src/components/library/index.js"],"sourcesContent":["// 扩展vue原有的功能：全局组件，自定义指令，挂载原型方法，注意：没有全局过滤器\n// 这就是插件\n// vue2.0插件写法要素：导出一个对象，有install函数，默认传入了Vue构造函数，Vue基础之上扩展\n// vue3.0插件写法要素：导出一个对象，有install函数，默认传入了app应用实例，app基础上扩展\nimport XtxSkeleton from './xtx-skeleton.vue';\nimport XtxCarousel from './xtx-carousel.vue';\nimport XtxMore from './xtx-more.vue';\nimport defaultImg from '@/assets/images/200.png';\n\nexport default {\n  install(app) {\n    // 在app上进行拓展，app提供component directive 函数\n    // 如果要挂载原型 app.config.globalProperties方式\n    app.component(XtxSkeleton.name, XtxSkeleton);\n    app.component(XtxCarousel.name, XtxCarousel);\n    app.component(XtxMore.name, XtxMore);\n    defineDirective(app);\n  },\n};\n// 指令\nconst defineDirective = (app) => {\n  // 创建全局指令\n  app.directive('lazyload', {\n    mounted(el, binding) {\n      // el为dom对象\n      // binding为自定义指令的值\n      const observer = new IntersectionObserver(\n        ([{ isIntersecting }]) => {\n          // 判断元素是否存在\n          if (isIntersecting) {\n            // 停止观察\n            observer.unobserve(el);\n            el.onerror = () => {\n              // 设置监视的dom元素src的值\n              el.src = defaultImg;\n            };\n            el.src = binding.value;\n          }\n        },\n        {\n          // 设置滚动到多少\n          threshold: 0.01,\n        }\n      );\n      // 开始观察\n      observer.observe(el);\n    },\n  });\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,UAAU,MAAM,yBAAyB;AAEhD,eAAe;EACbC,OAAO,CAACC,GAAG,EAAE;IACX;IACA;IACAA,GAAG,CAACC,SAAS,CAACN,WAAW,CAACO,IAAI,EAAEP,WAAW,CAAC;IAC5CK,GAAG,CAACC,SAAS,CAACL,WAAW,CAACM,IAAI,EAAEN,WAAW,CAAC;IAC5CI,GAAG,CAACC,SAAS,CAACJ,OAAO,CAACK,IAAI,EAAEL,OAAO,CAAC;IACpCM,eAAe,CAACH,GAAG,CAAC;EACtB;AACF,CAAC;AACD;AACA,MAAMG,eAAe,GAAIH,GAAG,IAAK;EAC/B;EACAA,GAAG,CAACI,SAAS,CAAC,UAAU,EAAE;IACxBC,OAAO,CAACC,EAAE,EAAEC,OAAO,EAAE;MACnB;MACA;MACA,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CACvC,CAAC,CAAC;QAAEC;MAAe,CAAC,CAAC,KAAK;QACxB;QACA,IAAIA,cAAc,EAAE;UAClB;UACAF,QAAQ,CAACG,SAAS,CAACL,EAAE,CAAC;UACtBA,EAAE,CAACM,OAAO,GAAG,MAAM;YACjB;YACAN,EAAE,CAACO,GAAG,GAAGf,UAAU;UACrB,CAAC;UACDQ,EAAE,CAACO,GAAG,GAAGN,OAAO,CAACO,KAAK;QACxB;MACF,CAAC,EACD;QACE;QACAC,SAAS,EAAE;MACb,CAAC,CACF;MACD;MACAP,QAAQ,CAACQ,OAAO,CAACV,EAAE,CAAC;IACtB;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}