{"ast":null,"code":"// 存储的分类数据\nimport { topCategory } from '@/api/constants';\nimport { findAllCategory } from '@/api/category';\n\n// 分类模块\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      // 如果默认是[]数组，看不见默认的9个分类，等你数据加载完毕才会看到。\n      // 所以，根据常量数据来生成一个默认的顶级分类数据，不会出现空白（没数据的情况）\n      list: topCategory.map(item => ({\n        name: item\n      }))\n    };\n  },\n  // 加载数据成功后需要修改list所以需要mutation函数\n  mutations: {\n    setList(state, headCategory) {\n      state.list = headCategory;\n    },\n    // 修改当前一级分类下的open数据为true\n    show(state, item) {\n      const category = state.list.find(category => category.id);\n    }\n  },\n  // 需要向后台加载数据，所以需要actions函数获取数据\n  actions: {\n    async getList({\n      commit\n    }) {\n      const {\n        result\n      } = await findAllCategory();\n      result.forEach(item => {\n        console.log(item);\n        item.open = false;\n      });\n      // 获取数据成功，提交mutation进行数据修改\n      commit('setList', result);\n    }\n  }\n};","map":{"version":3,"names":["topCategory","findAllCategory","namespaced","state","list","map","item","name","mutations","setList","headCategory","show","category","find","id","actions","getList","commit","result","forEach","console","log","open"],"sources":["E:/自己写的项目/tuxian/erabbit-pc-vue-project/src/store/modules/category.js"],"sourcesContent":["// 存储的分类数据\nimport { topCategory } from '@/api/constants';\nimport { findAllCategory } from '@/api/category';\n\n// 分类模块\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      // 如果默认是[]数组，看不见默认的9个分类，等你数据加载完毕才会看到。\n      // 所以，根据常量数据来生成一个默认的顶级分类数据，不会出现空白（没数据的情况）\n      list: topCategory.map((item) => ({ name: item })),\n    };\n  },\n  // 加载数据成功后需要修改list所以需要mutation函数\n  mutations: {\n    setList(state, headCategory) {\n      state.list = headCategory;\n    },\n    // 修改当前一级分类下的open数据为true\n    show(state, item) {\n      const category = state.list.find(category => category.id )\n    }\n  },\n  // 需要向后台加载数据，所以需要actions函数获取数据\n  actions: {\n    async getList({ commit }) {\n      const { result } = await findAllCategory();\n      result.forEach((item) => {\n        console.log(item);\n        item.open = false;\n      });\n      // 获取数据成功，提交mutation进行数据修改\n      commit('setList', result);\n    },\n  },\n};\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,eAAe,QAAQ,gBAAgB;;AAEhD;AACA,eAAe;EACbC,UAAU,EAAE,IAAI;EAChBC,KAAK,GAAG;IACN,OAAO;MACL;MACA;MACAC,IAAI,EAAEJ,WAAW,CAACK,GAAG,CAAEC,IAAI,KAAM;QAAEC,IAAI,EAAED;MAAK,CAAC,CAAC;IAClD,CAAC;EACH,CAAC;EACD;EACAE,SAAS,EAAE;IACTC,OAAO,CAACN,KAAK,EAAEO,YAAY,EAAE;MAC3BP,KAAK,CAACC,IAAI,GAAGM,YAAY;IAC3B,CAAC;IACD;IACAC,IAAI,CAACR,KAAK,EAAEG,IAAI,EAAE;MAChB,MAAMM,QAAQ,GAAGT,KAAK,CAACC,IAAI,CAACS,IAAI,CAACD,QAAQ,IAAIA,QAAQ,CAACE,EAAE,CAAE;IAC5D;EACF,CAAC;EACD;EACAC,OAAO,EAAE;IACP,MAAMC,OAAO,CAAC;MAAEC;IAAO,CAAC,EAAE;MACxB,MAAM;QAAEC;MAAO,CAAC,GAAG,MAAMjB,eAAe,EAAE;MAC1CiB,MAAM,CAACC,OAAO,CAAEb,IAAI,IAAK;QACvBc,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;QACjBA,IAAI,CAACgB,IAAI,GAAG,KAAK;MACnB,CAAC,CAAC;MACF;MACAL,MAAM,CAAC,SAAS,EAAEC,MAAM,CAAC;IAC3B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}